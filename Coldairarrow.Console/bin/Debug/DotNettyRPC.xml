<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNettyRPC</name>
    </assembly>
    <members>
        <member name="T:Coldairarrow.DotNettyRPC.RPCClientFactory">
            <summary>
            客户端工厂
            </summary>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCClientFactory.GetClient``1(System.String,System.Int32)">
            <summary>
            获取客户端
            注：默认服务名为接口名
            </summary>
            <typeparam name="T">接口定义类型</typeparam>
            <param name="serverIp">远程服务IP</param>
            <param name="port">远程服务端口</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCClientFactory.GetClient``1(System.String,System.Int32,System.String)">
            <summary>
            获取客户端
            注：自定义服务名
            </summary>
            <typeparam name="T">接口定义类型</typeparam>
            <param name="serverIp">远程服务IP</param>
            <param name="port">远程服务端口</param>
            <param name="serviceName">服务名</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.DotNettyRPC.RPCServer">
            <summary>
            RPC服务端
            </summary>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCServer.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="port">监听端口</param>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCServer.RegisterService``2">
            <summary>
            注册服务
            注：默认注册的服务为接口名
            </summary>
            <typeparam name="IService">服务接口</typeparam>
            <typeparam name="Service">服务实现</typeparam>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCServer.RegisterService``2(System.String)">
            <summary>
            注册服务,指定服务名
            </summary>
            <typeparam name="IService">服务接口</typeparam>
            <typeparam name="Service">服务实现</typeparam>
            <param name="serviceName">服务名</param>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCServer.Start">
            <summary>
            开始运行服务
            </summary>
        </member>
        <member name="M:Coldairarrow.DotNettyRPC.RPCServer.Stop">
            <summary>
            停止服务
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Extention.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.Extention.IsNullOrEmpty(System.Object)">
            <summary>
            判断是否为Null或者空
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToJson(System.Object)">
            <summary>
            将对象序列化成Json字符串
            </summary>
            <param name="obj">需要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            string转byte[]
            </summary>
            <param name="str">字符串</param>
            <param name="theEncoding">需要的编码</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject``1(System.String)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="jsonStr">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToObject(System.String,System.Type)">
            <summary>
            将Json字符串反序列化为对象
            </summary>
            <param name="jsonStr">json字符串</param>
            <param name="type">对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.Extention.ToIPEndPoint(System.String)">
            <summary>
            转为网络终结点IPEndPoint
            </summary>=
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="T:Coldairarrow.Util.AsyncHelpers">
            <summary>
            https://stackoverflow.com/questions/5095183/how-would-i-run-an-async-taskt-method-synchronously
            </summary>
        </member>
        <!-- 对于成员“M:Coldairarrow.Util.AsyncHelpers.RunSync(System.Func{System.Threading.Tasks.Task})”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:Coldairarrow.Util.AsyncHelpers.RunSync``1(System.Func{System.Threading.Tasks.Task{``0}})”忽略有格式错误的 XML 注释 -->
        <member name="T:Coldairarrow.Util.ExceptionHelper">
            <summary>
            异常处理帮助类
            </summary>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAddr(System.Exception)">
            <summary>
            获取异常位置
            </summary>
            <param name="e">异常</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAllMsg(System.Exception,System.Int32)">
            <summary>
            获取异常消息
            </summary>
            <param name="ex">捕捉的异常</param>
            <param name="level">内部异常层级</param>
            <returns></returns>
        </member>
        <member name="M:Coldairarrow.Util.ExceptionHelper.GetExceptionAllMsg(System.Exception)">
            <summary>
            获取异常消息
            </summary>
            <param name="ex">捕捉的异常</param>
            <returns></returns>
        </member>
    </members>
</doc>
